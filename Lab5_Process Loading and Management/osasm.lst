


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123
    4 00000000         ; A very simple real time operating system with minimal 
                       features.
    5 00000000         ; Daniel Valvano
    6 00000000         ; January 29, 2015
    7 00000000         ;
    8 00000000         ; This example accompanies the book
    9 00000000         ;  "Embedded Systems: Real Time Interfacing to ARM Corte
                       x M Microcontrollers",
   10 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2015
   11 00000000         ;
   12 00000000         ;  Programs 4.4 through 4.12, section 4.2
   13 00000000         ;
   14 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   15 00000000         ;    You may use, edit, run or distribute this file
   16 00000000         ;    as long as the above copyright notice remains
   17 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   18 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   19 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   20 00000000         ; VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR
                        SPECIAL, INCIDENTAL,
   21 00000000         ; OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; For more information about my classes, my research, an
                       d my books, see
   23 00000000         ; http://users.ece.utexas.edu/~valvano/
   24 00000000         ; */
   25 00000000         
   26 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   27 00000000                 THUMB
   28 00000000                 REQUIRE8
   29 00000000                 PRESERVE8
   30 00000000         
   31 00000000                 EXTERN           runPT       ; currently running
                                                             thread
   32 00000000                 EXTERN           nextPT
   33 00000000                 EXTERN           OS_AddThread
   34 00000000                 EXTERN           OS_Kill
   35 00000000                 EXTERN           OS_Sleep
   36 00000000                 EXTERN           OS_Time
   37 00000000                 EXTERN           OS_Id
   38 00000000                 EXPORT           OS_DisableInterrupts
   39 00000000                 EXPORT           OS_EnableInterrupts
   40 00000000                 EXPORT           StartOS
   41 00000000         ;EXPORT  SysTick_Handler
   42 00000000                 EXPORT           PendSV_Handler
   43 00000000                 EXPORT           SVC_Handler
   44 00000000                 EXTERN           threadRecordProfiler
   45 00000000                 EXTERN           OS_Id
   46 00000000                 EXTERN           OS_timeDisabled



ARM Macro Assembler    Page 2 


   47 00000000                 EXTERN           OS_timeEnabled
   48 00000000         
   49 00000000         
   50 00000000         OS_DisableInterrupts
   51 00000000 B672            CPSID            I
   52 00000002 B500            PUSH             {LR}
   53 00000004 F7FF FFFE       BL               OS_timeDisabled
   54 00000008 F85D EB04       POP              {LR}
   55 0000000C 4770            BX               LR
   56 0000000E         
   57 0000000E         
   58 0000000E         OS_EnableInterrupts
   59 0000000E B662            CPSIE            I
   60 00000010 B500            PUSH             {LR}
   61 00000012 F7FF FFFE       BL               OS_timeEnabled
   62 00000016 F85D EB04       POP              {LR}
   63 0000001A 4770            BX               LR
   64 0000001C         
   65 0000001C         
   66 0000001C         ;PendSV_Handler                ; 1) Saves R0-R3,R12,LR,P
                       C,PSR
   67 0000001C         ;CPSID   I                  ; 2) Prevent interrupt durin
                       g switch
   68 0000001C         ;PUSH    {R4-R11}           ; 3) Save remaining regs r4-
                       11
   69 0000001C         ;LDR     R0, =runPT         ; 4) R0=pointer to RunPt, ol
                       d thread
   70 0000001C         ;LDR     R1, [R0]           ;    R1 = RunPt
   71 0000001C         ;STR     SP, [R1]           ; 5) Save SP into TCB
   72 0000001C         ;LDR     R1, [R1,#4]        ; 6) R1 = RunPt->next
   73 0000001C         ;STR     R1, [R0]           ;    RunPt = R1
   74 0000001C         ;LDR     SP, [R1]           ; 7) new thread SP; SP = Run
                       Pt->sp;
   75 0000001C         ;POP     {R4-R11}           ; 8) restore regs r4-11
   76 0000001C         ;CPSIE   I                  ; 9) tasks run with interrup
                       ts enabled
   77 0000001C         ;BX      LR                 ; 10) restore R0-R3,R12,LR,P
                       C,PSR
   78 0000001C         
   79 0000001C         
   80 0000001C         ;switch using chosen NextPt
   81 0000001C         PendSV_Handler
   82 0000001C B672            CPSID            I
   83 0000001E B500            PUSH             {LR}
   84 00000020         ; BL OS_Id
   85 00000020         ; BL threadRecordProfiler
   86 00000020 F85D EB04       POP              {LR}
   87 00000024 E92D 0FF0       PUSH             {R4 - R11}
   88 00000028 481F            LDR              R0, =runPT
   89 0000002A 6801            LDR              R1, [R0]
   90 0000002C F8C1 D000       STR              SP, [R1]
   91 00000030 491E            LDR              R1, =nextPT
   92 00000032 680A            LDR              R2, [R1]
   93 00000034 6002            STR              R2, [R0]
   94 00000036 F8D2 D000       LDR              SP, [R2]
   95 0000003A E8BD 0FF0       POP              {R4 - R11}
   96 0000003E B662            CPSIE            I
   97 00000040 4770            BX               LR
   98 00000042         



ARM Macro Assembler    Page 3 


   99 00000042         
  100 00000042         ;SysTick_Handler
  101 00000042         ;    CPSID   I                  ; Prevent interruption d
                       uring context switch
  102 00000042         ;    PUSH    {R4-R11}           ; Save remaining regs r4
                       -11 
  103 00000042         ;    LDR     R0, =RunPt         ; R0=pointer to RunPt, o
                       ld thread
  104 00000042         ;    LDR     R1, [R0]     ; RunPt->stackPointer = SP;
  105 00000042         ;    STR     SP, [R1]           ; save SP of process bei
                       ng switched out
  106 00000042         ;    LDR     R1, =NodePt
  107 00000042         ;    LDR     R2, [R1]           ; NodePt
  108 00000042         ;    LDR     R2, [R2]           ; next to run
  109 00000042         ;    STR     R2, [R1]           ; NodePt= NodePt->Next;
  110 00000042         ;    LDR     R3, [R2,#4]        ; RunPt = &sys[NodePt->T
                       hread];// which thread
  111 00000042         ;    STR     R3, [R0]
  112 00000042         ;   
  113 00000042         ;    LDR     R2, [R2,#8]     ; NodePt->TimeSlice
  114 00000042         ;    SUB     R2, #50            ; subtract off time to r
                       un this ISR
  115 00000042         ;    LDR     R1, =NVIC_ST_RELOAD
  116 00000042         ;    STR     R2, [R1]           ; how long to run next t
                       hread
  117 00000042         ;    LDR     R1, =NVIC_ST_CURRENT
  118 00000042         ;    STR     R2, [R1]           ; write to current, clea
                       rs it
  119 00000042         
  120 00000042         ;    LDR     SP, [R3]           ; new thread SP; SP = Ru
                       nPt->stackPointer;
  121 00000042         ;    POP     {R4-R11}           ; restore regs r4-11 
  122 00000042         
  123 00000042         ;    CPSIE   I       ; tasks run with I=0
  124 00000042         ;    BX      LR                 ; Exception return will 
                       restore remaining context   
  125 00000042         ;    
  126 00000042         
  127 00000042         
  128 00000042         
  129 00000042         
  130 00000042         
  131 00000042         
  132 00000042         
  133 00000042         
  134 00000042         
  135 00000042         ;SysTick_Handler                ; 1) Saves R0-R3,R12,LR,
                       PC,PSR
  136 00000042         ;CPSID   I                  ; 2) Prevent interrupt durin
                       g switch
  137 00000042         ;PUSH    {R4-R11}           ; 3) Save remaining regs r4-
                       11
  138 00000042         ;LDR     R0, =runPT         ; 4) R0=pointer to RunPt, ol
                       d thread
  139 00000042         ;LDR     R1, [R0]           ;    R1 = RunPt
  140 00000042         ;STR     SP, [R1]           ; 5) Save SP into TCB
  141 00000042         ;LDR     R1, [R1,#4]        ; 6) R1 = RunPt->next
  142 00000042         ;STR     R1, [R0]           ;    RunPt = R1
  143 00000042         ;LDR     SP, [R1]           ; 7) new thread SP; SP = Run



ARM Macro Assembler    Page 4 


                       Pt->sp;
  144 00000042         ;POP     {R4-R11}           ; 8) restore regs r4-11
  145 00000042         ;CPSIE   I                  ; 9) tasks run with interrup
                       ts enabled
  146 00000042         ;BX      LR                 ; 10) restore R0-R3,R12,LR,P
                       C,PSR
  147 00000042         
  148 00000042         StartOS
  149 00000042 4819            LDR              R0, =runPT  ; currently running
                                                             thread
  150 00000044 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
  151 00000046 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
  152 0000004A E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
  153 0000004E BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                            
  154 00000050 F85D CB04       POP              {R12}
  155 00000054 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
  156 00000058 F85D EB04       POP              {LR}        ; start location
  157 0000005C BC02            POP              {R1}        ; discard PSR
  158 0000005E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  159 00000060 4770            BX               LR          ; start first threa
                                                            d
  160 00000062         
  161 00000062         SVC_Handler
  162 00000062         ; PUSH {LR}
  163 00000062 F8DD C018       LDR              R12,[SP,#24] ; Return address
  164 00000066 F83C CC02       LDRH             R12,[R12,#-2] ; SVC instruction
                                                             is 2 bytes
  165 0000006A F42C 4C7F       BIC              R12,#0xFF00 ; Extract trap numb
                                                            ers (ID) in R12
  166 0000006E E89D 000F       LDM              SP,{R0-R3}  ; Get any parameter
                                                            s
  167 00000072         
  168 00000072 B500            PUSH             {LR}        ; check BEQ for ret
                                                            urn value link
  169 00000074 F8DF E038       LDR              LR, =Return
  170 00000078 F1BC 0F00       CMP              R12, #0
  171 0000007C F43F AFFE       BEQ              OS_Id
  172 00000080 F1BC 0F01       CMP              R12, #1
  173 00000084 F43F AFFE       BEQ              OS_Kill
  174 00000088 F1BC 0F02       CMP              R12, #2
  175 0000008C F43F AFFE       BEQ              OS_Sleep
  176 00000090 F1BC 0F03       CMP              R12, #3
  177 00000094 F43F AFFE       BEQ              OS_Time
  178 00000098 F1BC 0F04       CMP              R12, #4
  179 0000009C F43F AFFE       BEQ              OS_AddThread
  180 000000A0         ; POP {LR}
  181 000000A0         ; BX LR
  182 000000A0         
  183 000000A0         Return
  184 000000A0 F85D EB04       POP              {LR}
  185 000000A4 9000            STR              R0,[SP]     ; Store return valu



ARM Macro Assembler    Page 5 


                                                            e
  186 000000A6 4770            BX               LR          ; Return from excep
                                                            tion
  187 000000A8         
  188 000000A8         
  189 000000A8                 ALIGN
  190 000000A8                 END
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\osasm.d -o.\osasm.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Luminary --predefine="__UVISION_VERSION SETA 
526" --list=.\osasm.lst OSasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 26 in file OSasm.s
   Uses
      None
Comment: .text unused
OS_DisableInterrupts 00000000

Symbol: OS_DisableInterrupts
   Definitions
      At line 50 in file OSasm.s
   Uses
      At line 38 in file OSasm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 0000000E

Symbol: OS_EnableInterrupts
   Definitions
      At line 58 in file OSasm.s
   Uses
      At line 39 in file OSasm.s
Comment: OS_EnableInterrupts used once
PendSV_Handler 0000001C

Symbol: PendSV_Handler
   Definitions
      At line 81 in file OSasm.s
   Uses
      At line 42 in file OSasm.s
Comment: PendSV_Handler used once
Return 000000A0

Symbol: Return
   Definitions
      At line 183 in file OSasm.s
   Uses
      At line 169 in file OSasm.s
Comment: Return used once
SVC_Handler 00000062

Symbol: SVC_Handler
   Definitions
      At line 161 in file OSasm.s
   Uses
      At line 43 in file OSasm.s
Comment: SVC_Handler used once
StartOS 00000042

Symbol: StartOS
   Definitions
      At line 148 in file OSasm.s
   Uses
      At line 40 in file OSasm.s
Comment: StartOS used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 33 in file OSasm.s
   Uses
      At line 179 in file OSasm.s
Comment: OS_AddThread used once
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 37 in file OSasm.s
      At line 45 in file OSasm.s
   Uses
      At line 171 in file OSasm.s
Warning: OS_Id multiply definedComment: OS_Id used once
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 34 in file OSasm.s
   Uses
      At line 173 in file OSasm.s
Comment: OS_Kill used once
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 35 in file OSasm.s
   Uses
      At line 175 in file OSasm.s
Comment: OS_Sleep used once
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 36 in file OSasm.s
   Uses
      At line 177 in file OSasm.s
Comment: OS_Time used once
OS_timeDisabled 00000000

Symbol: OS_timeDisabled
   Definitions
      At line 46 in file OSasm.s
   Uses
      At line 53 in file OSasm.s
Comment: OS_timeDisabled used once
OS_timeEnabled 00000000

Symbol: OS_timeEnabled
   Definitions
      At line 47 in file OSasm.s
   Uses
      At line 61 in file OSasm.s
Comment: OS_timeEnabled used once
nextPT 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: nextPT
   Definitions
      At line 32 in file OSasm.s
   Uses
      At line 91 in file OSasm.s
Comment: nextPT used once
runPT 00000000

Symbol: runPT
   Definitions
      At line 31 in file OSasm.s
   Uses
      At line 88 in file OSasm.s
      At line 149 in file OSasm.s

threadRecordProfiler 00000000

Symbol: threadRecordProfiler
   Definitions
      At line 44 in file OSasm.s
   Uses
      None
Comment: threadRecordProfiler unused
10 symbols
350 symbols in table
