


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123
    4 00000000         ; A very simple real time operating system with minimal 
                       features.
    5 00000000         ; Daniel Valvano
    6 00000000         ; January 29, 2015
    7 00000000         ;
    8 00000000         ; This example accompanies the book
    9 00000000         ;  "Embedded Systems: Real Time Interfacing to ARM Corte
                       x M Microcontrollers",
   10 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2015
   11 00000000         ;
   12 00000000         ;  Programs 4.4 through 4.12, section 4.2
   13 00000000         ;
   14 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   15 00000000         ;    You may use, edit, run or distribute this file
   16 00000000         ;    as long as the above copyright notice remains
   17 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   18 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   19 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   20 00000000         ; VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR
                        SPECIAL, INCIDENTAL,
   21 00000000         ; OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; For more information about my classes, my research, an
                       d my books, see
   23 00000000         ; http://users.ece.utexas.edu/~valvano/
   24 00000000         ; */
   25 00000000         
   26 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   27 00000000                 THUMB
   28 00000000                 REQUIRE8
   29 00000000                 PRESERVE8
   30 00000000         
   31 00000000                 EXTERN           runPT       ; currently running
                                                             thread
   32 00000000                 EXTERN           nextPT
   33 00000000                 EXPORT           OS_DisableInterrupts
   34 00000000                 EXPORT           OS_EnableInterrupts
   35 00000000                 EXPORT           StartOS
   36 00000000         ;EXPORT  SysTick_Handler
   37 00000000                 EXPORT           PendSV_Handler
   38 00000000         
   39 00000000         
   40 00000000         OS_DisableInterrupts
   41 00000000 B672            CPSID            I
   42 00000002 4770            BX               LR
   43 00000004         
   44 00000004         
   45 00000004         OS_EnableInterrupts
   46 00000004 B662            CPSIE            I



ARM Macro Assembler    Page 2 


   47 00000006 4770            BX               LR
   48 00000008         
   49 00000008         
   50 00000008         ;PendSV_Handler                ; 1) Saves R0-R3,R12,LR,P
                       C,PSR
   51 00000008         ;CPSID   I                  ; 2) Prevent interrupt durin
                       g switch
   52 00000008         ;PUSH    {R4-R11}           ; 3) Save remaining regs r4-
                       11
   53 00000008         ;LDR     R0, =runPT         ; 4) R0=pointer to RunPt, ol
                       d thread
   54 00000008         ;LDR     R1, [R0]           ;    R1 = RunPt
   55 00000008         ;STR     SP, [R1]           ; 5) Save SP into TCB
   56 00000008         ;LDR     R1, [R1,#4]        ; 6) R1 = RunPt->next
   57 00000008         ;STR     R1, [R0]           ;    RunPt = R1
   58 00000008         ;LDR     SP, [R1]           ; 7) new thread SP; SP = Run
                       Pt->sp;
   59 00000008         ;POP     {R4-R11}           ; 8) restore regs r4-11
   60 00000008         ;CPSIE   I                  ; 9) tasks run with interrup
                       ts enabled
   61 00000008         ;BX      LR                 ; 10) restore R0-R3,R12,LR,P
                       C,PSR
   62 00000008         
   63 00000008         
   64 00000008         ;switch using chosen NextPt
   65 00000008         PendSV_Handler
   66 00000008 B672            CPSID            I
   67 0000000A B500            PUSH             {LR}
   68 0000000C F85D EB04       POP              {LR}
   69 00000010 E92D 0FF0       PUSH             {R4 - R11}
   70 00000014 480E            LDR              R0, =runPT
   71 00000016 6801            LDR              R1, [R0]
   72 00000018 F8C1 D000       STR              SP, [R1]
   73 0000001C 490D            LDR              R1, =nextPT
   74 0000001E 680A            LDR              R2, [R1]
   75 00000020 6002            STR              R2, [R0]
   76 00000022 F8D2 D000       LDR              SP, [R2]
   77 00000026 E8BD 0FF0       POP              {R4 - R11}
   78 0000002A B662            CPSIE            I
   79 0000002C 4770            BX               LR
   80 0000002E         
   81 0000002E         
   82 0000002E         ;SysTick_Handler
   83 0000002E         ;    CPSID   I                  ; Prevent interruption d
                       uring context switch
   84 0000002E         ;    PUSH    {R4-R11}           ; Save remaining regs r4
                       -11 
   85 0000002E         ;    LDR     R0, =RunPt         ; R0=pointer to RunPt, o
                       ld thread
   86 0000002E         ;    LDR     R1, [R0]     ; RunPt->stackPointer = SP;
   87 0000002E         ;    STR     SP, [R1]           ; save SP of process bei
                       ng switched out
   88 0000002E         ;    LDR     R1, =NodePt
   89 0000002E         ;    LDR     R2, [R1]           ; NodePt
   90 0000002E         ;    LDR     R2, [R2]           ; next to run
   91 0000002E         ;    STR     R2, [R1]           ; NodePt= NodePt->Next;
   92 0000002E         ;    LDR     R3, [R2,#4]        ; RunPt = &sys[NodePt->T
                       hread];// which thread
   93 0000002E         ;    STR     R3, [R0]



ARM Macro Assembler    Page 3 


   94 0000002E         ;   
   95 0000002E         ;    LDR     R2, [R2,#8]     ; NodePt->TimeSlice
   96 0000002E         ;    SUB     R2, #50            ; subtract off time to r
                       un this ISR
   97 0000002E         ;    LDR     R1, =NVIC_ST_RELOAD
   98 0000002E         ;    STR     R2, [R1]           ; how long to run next t
                       hread
   99 0000002E         ;    LDR     R1, =NVIC_ST_CURRENT
  100 0000002E         ;    STR     R2, [R1]           ; write to current, clea
                       rs it
  101 0000002E         
  102 0000002E         ;    LDR     SP, [R3]           ; new thread SP; SP = Ru
                       nPt->stackPointer;
  103 0000002E         ;    POP     {R4-R11}           ; restore regs r4-11 
  104 0000002E         
  105 0000002E         ;    CPSIE   I       ; tasks run with I=0
  106 0000002E         ;    BX      LR                 ; Exception return will 
                       restore remaining context   
  107 0000002E         ;    
  108 0000002E         
  109 0000002E         
  110 0000002E         
  111 0000002E         
  112 0000002E         
  113 0000002E         
  114 0000002E         
  115 0000002E         
  116 0000002E         
  117 0000002E         ;SysTick_Handler                ; 1) Saves R0-R3,R12,LR,
                       PC,PSR
  118 0000002E         ;CPSID   I                  ; 2) Prevent interrupt durin
                       g switch
  119 0000002E         ;PUSH    {R4-R11}           ; 3) Save remaining regs r4-
                       11
  120 0000002E         ;LDR     R0, =runPT         ; 4) R0=pointer to RunPt, ol
                       d thread
  121 0000002E         ;LDR     R1, [R0]           ;    R1 = RunPt
  122 0000002E         ;STR     SP, [R1]           ; 5) Save SP into TCB
  123 0000002E         ;LDR     R1, [R1,#4]        ; 6) R1 = RunPt->next
  124 0000002E         ;STR     R1, [R0]           ;    RunPt = R1
  125 0000002E         ;LDR     SP, [R1]           ; 7) new thread SP; SP = Run
                       Pt->sp;
  126 0000002E         ;POP     {R4-R11}           ; 8) restore regs r4-11
  127 0000002E         ;CPSIE   I                  ; 9) tasks run with interrup
                       ts enabled
  128 0000002E         ;BX      LR                 ; 10) restore R0-R3,R12,LR,P
                       C,PSR
  129 0000002E         
  130 0000002E         StartOS
  131 0000002E 4808            LDR              R0, =runPT  ; currently running
                                                             thread
  132 00000030 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
  133 00000032 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
  134 00000036 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
  135 0000003A BC0F            POP              {R0-R3}     ; restore regs r0-3



ARM Macro Assembler    Page 4 


                                                            
  136 0000003C F85D CB04       POP              {R12}
  137 00000040 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
  138 00000044 F85D EB04       POP              {LR}        ; start location
  139 00000048 BC02            POP              {R1}        ; discard PSR
  140 0000004A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  141 0000004C 4770            BX               LR          ; start first threa
                                                            d
  142 0000004E         
  143 0000004E 00 00           ALIGN
  144 00000050                 END
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__MICROLIB SETA 1" --list=.\osasm.lst OSasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 26 in file OSasm.s
   Uses
      None
Comment: .text unused
OS_DisableInterrupts 00000000

Symbol: OS_DisableInterrupts
   Definitions
      At line 40 in file OSasm.s
   Uses
      At line 33 in file OSasm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 00000004

Symbol: OS_EnableInterrupts
   Definitions
      At line 45 in file OSasm.s
   Uses
      At line 34 in file OSasm.s
Comment: OS_EnableInterrupts used once
PendSV_Handler 00000008

Symbol: PendSV_Handler
   Definitions
      At line 65 in file OSasm.s
   Uses
      At line 37 in file OSasm.s
Comment: PendSV_Handler used once
StartOS 0000002E

Symbol: StartOS
   Definitions
      At line 130 in file OSasm.s
   Uses
      At line 35 in file OSasm.s
Comment: StartOS used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

nextPT 00000000

Symbol: nextPT
   Definitions
      At line 32 in file OSasm.s
   Uses
      At line 73 in file OSasm.s
Comment: nextPT used once
runPT 00000000

Symbol: runPT
   Definitions
      At line 31 in file OSasm.s
   Uses
      At line 70 in file OSasm.s
      At line 131 in file OSasm.s

2 symbols
340 symbols in table
